generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  leetcodeUser       String?
  role               String              @default("MEMBER")
  accounts           Account[]
  additionalContents AdditionalContent[] @relation("UserAdditionalContents")
  sessions           Session[]
  solvedProblems     Problem[]           @relation("SolvedProblems")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Week {
  id          String    @id @default(cuid())
  number      Int
  title       String
  description String
  isBlocked   Boolean
  color       String
  resources   String[]
  problems    Problem[]
}

model Problem {
  id          String     @id @default(cuid())
  name        String
  level       Difficulty
  leetcodeUrl String
  weekId      String
  week        Week       @relation(fields: [weekId], references: [id], onDelete: Cascade)
  solvedBy    User[]     @relation("SolvedProblems")
}

model AdditionalContent {
  id        String   @id @default(cuid())
  topic     String
  content   String
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation("UserAdditionalContents", fields: [authorId], references: [id], onDelete: Cascade)
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  INSANE
}
